CREATE QUERY shortest_path_length(
  int max_hops=5,
  VERTEX<Payment_Transaction> ver) FOR GRAPH Transaction_Fraud RETURNS(INT){ 
 
    /*
    This query identifies the shortest path from any given transaction to a known fraudulent 
    transaction within the network. It measures the path length, considering the route 
    through either a Card or a Merchant and onto another transaction, as one unit of length. 
    It also a sub query that can be called by the all pair shortest path length query. 
    */
    
    
    
  OrAccum @or_visited;
  MinAccum<INT> @path_len;
  SetAccum<VERTEX> @@target_vertices;
  MinAccum<INT> @@shortest_path_length;   
    seed={ver};
    start = SELECT s
        FROM seed:s 
        POST-ACCUM s.@path_len =0,
                   s.@or_visited += TRUE,
                   IF s.is_fraud ==1 THEN 
                   @@shortest_path_length +=0 
                   END;
    
    
    WHILE (start.size() > 0) LIMIT max_hops DO
      start = SELECT tgt 
              FROM start:s -((Merchant_Receive_Transaction|Card_Send_Transaction):e1)- :c2
                  -((Merchant_Receive_Transaction|Card_Send_Transaction):e2)- Payment_Transaction:tgt
              WHERE tgt.@or_visited == FALSE
              ACCUM 
                  tgt.@path_len += s.@path_len + 1,
                  IF tgt.is_fraud==1 THEN 
                    @@shortest_path_length += s.@path_len + 1
                  END
              POST-ACCUM 
                  tgt.@or_visited += TRUE;
  END;
  rlt = SELECT s 
        FROM seed:s 
        POST-ACCUM s.setAttr("shortest_path_length", @@shortest_path_length);  
  RETURN @@shortest_path_length; 
}