{
    "queries": [
        {
            "function_header": "delete_all_party_cc_connections",
            "description": "This query deletes all the Entity_In_Ring edges and is used as the first step in the Entity Resolution process.",
            "docstring": "This query removes all the Entity_In_Ring edges in the system. This query is used as the first step in the Entity Resolution process. Run the query with `runInstalledQuery('delete_all_party_cc_connections', params={'num_of_batches': 'INSERT_NUM_OF_BATCHES_HERE', 'batch_id': 'INSERT_BATCH_ID_HERE' })` num_of_batches defaults to 1. batch_id defaults to 0",
            "param_types": {
                "num_of_batches": "int",
                "batch_id": "int"
            }
        },
        {
            "function_header": "match_party_entities",
            "description": "This query finds matches and creates similarity edges between entities that match. It is used as the second step in the Entity Resolution process, right after running delete_all_party_cc_connections.",
            "docstring": "This query finds matches between entities. This query inserts same_as edges between entities that match. This query is used as the 2nd step in the Entity Resolution process. Run the query with `runInstalledQuery('match_party_entities', params={ 'customer_has_birthdate_weight': 'INSERT_WEIGHT_VALUE_HERE', 'customer_has_email_address_weight': 'INSERT_WEIGHT_VALUE_HERE', 'customer_has_name_weight': 'INSERT_WEIGHT_VALUE_HERE', 'customer_has_phone_weight': 'INSERT_WEIGHT_VALUE_HERE', 'customer_has_std_city_weight': 'INSERT_WEIGHT_VALUE_HERE', 'customer_has_std_postcode_weight': 'INSERT_WEIGHT_VALUE_HERE', 'customer_has_std_state_weight': 'INSERT_WEIGHT_VALUE_HERE', 'customer_has_std_street_address_weight': 'INSERT_WEIGHT_VALUE_HERE', 'customer_has_tax_id_number_weight': 'INSERT_WEIGHT_VALUE_HERE', 'customer_has_source_customer_id_weight': 'INSERT_WEIGHT_VALUE_HERE', 'num_of_source_batches': 'INSERT_NUM_OF_SOURCE_BATCHES_HERE', 'num_of_target_batches': 'INSERT_NUM_OF_TARGET_BATCHES_HERE', 'threshold': 'INSERT_THRESHOLD_HERE', 'pii_low_connections_limit': 'INSERT_LOW_CONNECTIONS_LIMIT_HERE', 'pii_high_connections_limit': 'INSERT_HIGH_CONNECTIONS_LIMIT_HERE', 'compute_entities_after_date': 'INSERT_TIMESTAMP_HERE' })` customer_has_birthdate_weight defaults to 0.2. customer_has_email_address_weight defaults to 0.2. customer_has_name_weight defaults to 0.2. customer_has_phone_weight defaults to 0.2. customer_has_std_city_weight defaults to 0.2. customer_has_std_postcode_weight defaults to 0.2. customer_has_std_state_weight defaults to 0.2. customer_has_std_street_address_weight defaults to 0.2. customer_has_tax_id_number_weight defaults to 0.2. customer_has_source_customer_id_weight defaults to 0.2. num_of_source_batches defaults to 10. num_of_target_batches defaults to 1. threshold defaults to 1. pii_low_connections_limit defaults to 100. pii_high_connections_limit defaults to 25000. compute_entities_after_date defaults to 1970-01-01 00:00:00",
            "param_types": {
                "customer_has_birthdate_weight": "float",
                "customer_has_email_address_weight": "float",
                "customer_has_name_weight": "float",
                "customer_has_phone_weight": "float",
                "customer_has_std_city_weight": "float",
                "customer_has_std_postcode_weight": "float",
                "customer_has_std_state_weight": "float",
                "customer_has_std_street_address_weight": "float",
                "customer_has_tax_id_number_weight": "float",
                "customer_has_source_customer_id_weight": "float",
                "num_of_source_batches": "int",
                "num_of_target_batches": "int",
                "threshold": "float",
                "pii_low_connections_limit": "int",
                "pii_high_connections_limit": "int",
                "compute_entities_after_date": "datetime"
            }
        },
        {
            "function_header": "unify_party_entities",
            "description": "This query groups together the matches entities, by connecting them to the same Connected_Compoennt veretx.",
            "docstring": "This query groups together the matches entities, by connecting them to the same Connected_Compoennt node. This query creates Entity_In_Ring edges. Run the query with `runInstalledQuery('unify_party_entities')` this query does not have any params",
            "param_types": {}
        },
        {
            "function_header": "delete_unused_cc_nodes",
            "description": "This query deletes all the unused Connected_Component vertices and it is used as an optional extra step after running the Entity Resolution process.",
            "docstring": "This query removes all the unused Connected_Component nodes in the system. This query is used as an optional extra step after running the Entity Resolution process. Run the query with `runInstalledQuery('delete_unused_cc_nodes', params={'num_of_batches': 'INSERT_NUM_OF_BATCHES_HERE', 'batch_id': 'INSERT_BATCH_ID_HERE' })` num_of_batches defaults to 1. batch_id defaults to 0",
            "param_types": {
                "num_of_batches": "int",
                "batch_id": "int"
            }
        },
        {
            "function_header": "incremental_party_match",
            "description": "",
            "docstring": "",
            "param_types": {
                "Customer_Full_Name_weight": "float",
                "Customer_DOB_weight": "float",
                "Customer_Email_weight": "float",
                "Customer_Phone_weight": "float",
                "Customer_Address_weight": "float",
                "Customer_IP_weight": "float",
                "Customer_ID_weight": "float",
                "Customer_Device_weight": "float",
                "Customer_Application_weight": "float",
                "Customer_Account_weight": "float",
                "Customer_Card_weight": "float",
                "threshold": "float"
            }
        },
        {
            "function_header": "incremental_party_unify",
            "description": "",
            "docstring": "",
            "param_types": {
                "parties": "SET<VERTEX<Party>>"
            }
        },
        {
            "function_header": "get_party_cc_features",
            "description": "",
            "docstring": "",
            "param_types": {
                "party": "VERTEX<Party>",
                "connections": "int"
            }
        },
        {
            "function_header": "distance_and_path_to_fraud_party",
            "description": "",
            "docstring": "",
            "param_types": {
                "input": "VERTEX<Party>",
                "depth": "int"
            }
        }
    ]
}